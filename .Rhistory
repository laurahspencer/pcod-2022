# summary(res.temp.6.10 <- results(dds.DESeq.temperature, contrast=c("temperature", "6", "10"), alpha=0.05))
# paste("No. of genes differentially expressed (padj<0.05) between 6C & 10C, any pH:",  sum(res.temp.6.10$padj < 0.05, na.rm=TRUE))
#
# print("Comparison: amb and low pH, any temp")
# summary(res.ph <- results(dds.DESeq.ph, contrast=c("ph", "amb", "low"), alpha=0.05))
# paste("No. of genes differentially expressed (padj<0.05) between ambient and low pH, any temperature",  sum(res.ph$padj < 0.05, na.rm=TRUE))
nrow(res.pH.6)
save(res.pH.3, file = "../results/deseq2/res.pH.3")
save(res.pH.6, file = "../results/deseq2/res.pH.6")
save(res.pH.10, file = "../results/deseq2/res.pH.10")
save(res.temp.3.6.amb, file = "../results/deseq2/res.temp.3.6.amb")
save(res.temp.3.10.amb, file = "../results/deseq2/res.temp.3.10.amb")
save(res.temp.6.10.amb, file = "../results/deseq2/res.temp.6.10.amb")
save(res.temp.3.6.low, file = "../results/deseq2/res.temp.3.6.low")
save(res.temp.3.10.low, file = "../results/deseq2/res.temp.3.10.low")
save(res.temp.6.10.low, file = "../results/deseq2/res.temp.6.10.low")
diffex.pH.3 <- subset(res.pH.3, padj < 0.05)
diffex.pH.6 <- subset(res.pH.6, padj < 0.05)
diffex.pH.10 <- subset(res.pH.10, padj < 0.05)
diffex.temp.3.6.amb <- subset(res.temp.3.6.amb, padj < 0.05)
diffex.temp.3.10.amb <- subset(res.temp.3.10.amb, padj < 0.05)
diffex.temp.6.10.amb <- subset(res.temp.6.10.amb, padj < 0.05)
diffex.temp.3.6.low <- subset(res.temp.3.6.low, padj < 0.05)
diffex.temp.3.10.low <- subset(res.temp.3.10.low, padj < 0.05)
diffex.temp.6.10.low <- subset(res.temp.6.10.low, padj < 0.05)
save(diffex.pH.3, file = "../results/deseq2/diffex.pH.3")
save(diffex.pH.6, file = "../results/deseq2/diffex.pH.6")
save(diffex.pH.10, file = "../results/deseq2/diffex.pH.10")
save(diffex.temp.3.6.amb, file = "../results/deseq2/diffex.temp.3.6.amb")
save(diffex.temp.3.10.amb, file = "../results/deseq2/diffex.temp.3.10.amb")
save(diffex.temp.6.10.amb, file = "../results/deseq2/diffex.temp.6.10.amb")
save(diffex.temp.3.6.low, file = "../results/deseq2/diffex.temp.3.6.low")
save(diffex.temp.3.10.low, file = "../results/deseq2/diffex.temp.3.10.low")
save(diffex.temp.6.10.low, file = "../results/deseq2/diffex.temp.6.10.low")
length(unique(c(diffex.pH.3 %>% rownames(), diffex.pH.6 %>% rownames(), diffex.pH.10 %>% rownames())))
# write simple function to return the name of an object as a string
degs <- list(
diffex.pH.3, diffex.pH.6, diffex.pH.10,
diffex.temp.3.6.amb, diffex.temp.3.10.amb, diffex.temp.6.10.amb,
diffex.temp.3.6.low, diffex.temp.3.10.low, diffex.temp.6.10.low)
names(degs) <- c("Amb vs. Low pH @3C", "Amb vs. Low pH @6C", "Amb vs. Low pH @ 10C",
"3 vs. 6C @Amb pH", "3 vs. 10C @Amb pH", "6 vs. 10C @Amb pH",
"3 vs. 6C @Low pH", "3 vs. 10C @Low pH", "6 vs. 10C @Low pH")
grp <- c(rep("pH contrast", times=3), rep("temperature contrast, @ amb pH", times=3), rep("temperature contrast, @ low pH", times=3))
n.degs <- data.frame(matrix(NA, nrow = length(degs), ncol = 4))
names(n.degs) <- c("contrast", "n.degs", "perc", "grp")
for (i in (1:length(degs))) {
n.degs[i,1] <- names(degs[i])
n.degs[i,2] <- nrow(degs[[i]])
n.degs[i,3] <- 100*round(nrow(degs[[i]])/ncol(counts.ts), digits = 2)
n.degs[i,4] <- grp[i]
}
n.degs$contrast <- factor(n.degs$contrast, levels=n.degs$contrast, ordered = T)
ggplot(data=n.degs, aes(x=contrast, y=n.degs, fill=grp)) + geom_bar(stat = "identity") +
geom_text(hjust=-0.1, size=3.5, aes(label=paste(comma(n.degs), " (", perc, "%)", sep=""))) +
#  geom_text(hjust=-1, aes(label=perc)) +
xlab("Contrast") + ylab("Number Differentially Expressed Genes (% of all genes)") + coord_flip() +
theme_minimal() + ylim(c(0,12500)) + theme(legend.position = "bottom") +
scale_fill_discrete(name=NULL) +
guides(fill=guide_legend(nrow=3,byrow=TRUE))
length(unique(c(diffex.temp.3.6.amb %>% rownames(), diffex.temp.3.10.amb %>% rownames(), diffex.temp.6.10.amb %>% rownames())))
length(unique(c(diffex.temp.3.6.low %>% rownames(), diffex.temp.3.10.low %>% rownames(), diffex.temp.6.10.low %>% rownames())))
round(100*(length(unique(c(diffex.pH.3 %>% rownames(), diffex.pH.6 %>% rownames(), diffex.pH.10 %>% rownames()))))/(res.pH.3 %>% nrow()), digits = 1)
round(100*(length(unique(c(diffex.temp.3.6.amb %>% rownames(), diffex.temp.3.10.amb %>% rownames(), diffex.temp.6.10.amb %>% rownames()))))/(res.temp.3.6.amb %>% nrow()), digits = 1)
round(100*(length(unique(c(diffex.temp.3.6.low %>% rownames(), diffex.temp.3.10.low %>% rownames(), diffex.temp.6.10.low %>% rownames()))))/(res.temp.3.6.low %>% nrow()), digits = 1)
# Generate counts matrix With DEGs among any pH treatment
diffex.pH.counts <- subset(assay(vsd.treatment), rownames(dds.DESeq.treatment) %in% unique(c(rownames(diffex.pH.3),rownames(diffex.pH.6),rownames(diffex.pH.10))))
# Create a dataframe to annotate heatmap with treatments
dds.pH.df <- sample.info[match(colnames(diffex.pH.counts), sample.info$vial_label),c("vial_label", "treatment", "tank", "temperature", "ph")] %>%
remove_rownames() %>% column_to_rownames(var = "vial_label")
# Make sure treatment order is correct
all(colnames(diffex.pH.counts) == rownames(dds.pH.df)) #double check that samples are still in same order
# All DEGs among any pH treatment (within temperatures)
pheatmap(diffex.pH.counts, cluster_rows=TRUE, cluster_cols=FALSE,
show_rownames=FALSE, na.rm=TRUE, annotation_colors = list(treatment=
c("3_amb"= "navyblue", "3_low"="royalblue1","6_amb"="darkgreen",
"6_low"="yellow3","10_amb"="firebrick4", "10_low"="sienna2")),
scale="row", main = "Differentially expressed genes (DEGs) among any pH treatment",
annotation_col=dds.pH.df[,"treatment", drop=FALSE], fontsize = 8,
cutree_rows = 2,  border_color=F)
# # another way to do a heatmap
# heatmap(diffex.pH.counts, Colv = NA, scale="row", ColSideColors = brewer.pal(3, "Set1")[dds.pH.df$Treatment])
ph.amb <- sample.info[sample.info$ph=="amb",]$vial_label
# Generate counts matrix With DEGs among any tempreature treatment, ambient pH only
diffex.temp.counts.amb <-
(subset(assay(vsd.treatment), rownames(dds.DESeq.treatment) %in%
unique(c(rownames(diffex.temp.3.6.amb),
rownames(diffex.temp.3.10.amb),
rownames(diffex.temp.6.10.amb)))) %>%
as.data.frame())[ph.amb] %>% as.matrix()
ph.amb
View(sample.info)
# Read in data from GoogleSheet
sample.info <- read_sheet("https://docs.google.com/spreadsheets/d/1EEfNTnOgQAeAJQv3lQctNC7sXR_JFLeSj9p0x58zUXM/edit?usp=sharing", "RNASeq-samples")[1:11] %>%
clean_names() %>%
mutate_at(vars(tank, temperature, ph, sequenced), as.factor) %>%
mutate_at(vars(length), as.numeric) %>%
mutate(treatment=as.factor(paste(temperature, ph, sep="_"))) %>%
mutate(treatment_tank=factor(paste(treatment, tank, sep="_"))) %>%
filter(sequenced=="YES")
save(sample.info, file="../data/sample.info")
ph.amb <- sample.info[sample.info$ph=="amb",]$vial_label
# Generate counts matrix With DEGs among any tempreature treatment, ambient pH only
diffex.temp.counts.amb <-
(subset(assay(vsd.treatment), rownames(dds.DESeq.treatment) %in%
unique(c(rownames(diffex.temp.3.6.amb),
rownames(diffex.temp.3.10.amb),
rownames(diffex.temp.6.10.amb)))) %>%
as.data.frame())[ph.amb] %>% as.matrix()
getwd()
# source("../references/biostats.R")
# Add all required libraries that are installed with install.packages() here
list.of.packages <- c("RCurl", "tidyverse", "vegan", "pheatmap", "pastecs", "factoextra", "FactoMineR", "RColorBrewer", "tibble", "reshape2", "plotly", "corrplot", "PerformanceAnalytics", "cowplot", "here", "janitor", "clipr", "googlesheets4")
# Add all libraries that are installed using BiocManager here
bioconductor.packages <- c("DESeq2", "WGCNA")
#
# # Install BiocManager if needed
# if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
#
# # Get names of all required packages that aren't installed
# new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# new.bioc.packages <- bioconductor.packages[!(bioconductor.packages %in% installed.packages()[, "Package"])]
# # Install all new packages
# if(length(new.packages)) install.packages(new.packages)
# if(length(new.bioc.packages)) BiocManager::install(new.bioc.packages)
# Load all required libraries
all.packages <- c(list.of.packages, bioconductor.packages)
lapply(all.packages, FUN = function(X) {
do.call("require", list(X))
})
# library.stats <- read.csv("../data/library-prep-stats.csv", header=T) %>% clean_names %>%
#   dplyr::mutate_at(vars(tank, p_h, batch, date_extracted), as.factor)
# Read in data from GoogleSheet
sample.info <- read_sheet("https://docs.google.com/spreadsheets/d/1EEfNTnOgQAeAJQv3lQctNC7sXR_JFLeSj9p0x58zUXM/edit?usp=sharing", "RNASeq-samples")[1:11] %>%
clean_names() %>%
mutate_at(vars(tank, temperature, ph, sequenced), as.factor) %>%
mutate_at(vars(length), as.numeric) %>%
mutate(treatment=as.factor(paste(temperature, ph, sep="_"))) %>%
mutate(treatment_tank=factor(paste(treatment, tank, sep="_"))) %>%
filter(sequenced=="YES")
save(sample.info, file="../data/sample.info")
# multiqc.stats <- read.delim(file="../results/fastqc/multiqc_data_trimmed-v2/multiqc_general_stats.txt", sep = "\t")
# colnames(multiqc.stats) <- gsub("FastQC_mqc.generalstats.fastqc.", "", colnames(multiqc.stats))
# multiqc.stats <- multiqc.stats %>%
#   mutate(total_unique = total_sequences*(100-percent_duplicates)/100) %>%
#   left_join(sample.info)
# cor(multiqc.stats %>% mutate(Tank=as.numeric(Tank)) %>% dplyr::select_if(is.numeric) %>%
#       dplyr::select(-Crab, -crab, -initial_volume, -volume_used_at_start_of_library_prep, -water_to_add_to_bring_to_50u_l,
#                     -diluted_concentration, -pcr_cycles, -volume_used_in_qc), use="complete.obs") %>% corrplot::corrplot(tl.cex=.75)
# Using STAR aligned and STAR quantified counts
filenames <- read_delim(file="../results/star/countsfilenames.txt", col_names = c("filename", "sample"), delim = "\t")
files <- file.path(filenames$filename) #extract vector of filenames
all(file.exists(files)) #easy code to check that all files exist!
file_list <- vector(mode = "list", length = nrow(filenames))
names(file_list) <- c(filenames$sample)
for (i in 1:nrow(filenames)) {
file_list[[i]] <- data.frame(read.delim(file=files[i]))[-1:-4,1:2]
names(file_list[[i]]) <- c("gene", filenames$sample[i])
print(paste("Total COUNTS,", names(file_list[[i]][2]), ":", prettyNum(sum(file_list[[i]][2]), big.mark=","), sep=" "))
print(paste("Total GENES,", names(file_list[[i]][2]), ":", prettyNum(nrow(file_list[[i]] %>% filter(.[[2]] != 0)), big.mark=","), sep=" "))
}
(counts <- file_list %>% purrr::reduce(full_join, by = "gene") %>% column_to_rownames(var="gene"))
print(paste("Number of samples:", ncol(counts %>% dplyr::select(contains("PCG"))), sep=" "))
print(paste("Total number of genes in dataframe:", prettyNum(nrow(counts), big.mark = ","), sep=" "))
print(paste("Average number of genes per sample:", prettyNum(mean(colSums(counts %>% dplyr::select(contains("PCG")) != 0)) %>% round(), big.mark = ","), sep=" "))
print(paste("Total counts, all samples:", prettyNum(sum(colSums(counts %>% dplyr::select(contains("PCG")))), big.mark = ","), sep=" "))
#print(paste("Counts for", colnames(counts %>% select(contains("PCG"))), ":",  prettyNum(colSums(counts %>% select(contains("PCG"))), big.mark = ","), sep=" "))
#inspect total counts by sample
ggplotly(
ggplot(data.frame(colSums(counts %>% dplyr::select(contains("PCG")))) %>%
dplyr::rename(count.total = 1) %>% rownames_to_column(var="sample")) +
geom_bar(aes(x=sample, y=count.total), stat = "identity") + ggtitle("Total count by sample") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()))
remove.list <- c("PCG194", "PCG137")
counts <- counts[ , -which(names(counts) %in% remove.list)]
sample.info <- sample.info[ -which(sample.info$sample %in% remove.list), ]
# resave sample info object
save(sample.info, file="../data/sample.info")
nrow(sample.info) == ncol(counts)-5 #should = TRUE
# counts <- counts %>% separate(Chr, into = c("X", "Y", "scaffold"), sep = "_", remove = F) %>%
#   mutate(scaffold=as.integer(scaffold)) %>% filter(scaffold<=104) %>% dplyr::select(-X, -Y, -scaffold)
# counts <- counts[-which(rownames(counts) %in% outliers),]
#str(counts) #columns #1-#5 contain extraneous gene info (chr, start, end, strand, length).
counts.t <- as.data.frame(t(counts)) #remove extraneous columns, transform data to have each sample a row, each column a gene
keep1 <- colMeans(counts.t, na.rm=TRUE) >= 10 #identify genes with mean count >= 10 across all samples (excluding NAs = 10)
keep2 <- rowSums( counts >= 30 ) >= 0.1*59 #identify genes with counts>=30 across at minimum 10% of the samples
keep <- unique(c(names(which(keep1 == T)), names(which(keep2 == T)))) # list of genes meeting one of the two above criteria
counts.ts <- counts.t[,keep]
print(paste("# genes before filtering:", ncol(counts.t)))
print(paste("# genes remaining after pre-filtering:", ncol(counts.ts)))
print(paste("# of genes dropped:", ncol(counts.t) - ncol(counts.ts), sep=" "))
print(paste("% of fragments remaining after pre-filtering: ", signif(100*sum(counts.ts)/sum(counts.t), digits = 5), "%", sep=""))
print(paste("Number of fragments dropped: ", signif(sum(counts.t)-sum(counts.ts), digits = 5)))
print(paste("% of fragments dropped: ", signif(100*(sum(counts.t)-sum(counts.ts))/sum(counts.t), digits = 5), "%", sep=""))
print(paste("Number of fragments remaining: ", signif(sum(counts.ts), digits = 5)))
remove.list <- c("PCG194", "PCG137")
counts <- counts[ , -which(names(counts) %in% remove.list)]
sample.info <- sample.info[ -which(sample.info$vial_label %in% remove.list), ]
View(sample.info)
# library.stats <- read.csv("../data/library-prep-stats.csv", header=T) %>% clean_names %>%
#   dplyr::mutate_at(vars(tank, p_h, batch, date_extracted), as.factor)
# Read in data from GoogleSheet
sample.info <- read_sheet("https://docs.google.com/spreadsheets/d/1EEfNTnOgQAeAJQv3lQctNC7sXR_JFLeSj9p0x58zUXM/edit?usp=sharing", "RNASeq-samples")[1:11] %>%
clean_names() %>%
mutate_at(vars(tank, temperature, ph, sequenced), as.factor) %>%
mutate_at(vars(length), as.numeric) %>%
mutate(treatment=as.factor(paste(temperature, ph, sep="_"))) %>%
mutate(treatment_tank=factor(paste(treatment, tank, sep="_"))) %>%
filter(sequenced=="YES")
save(sample.info, file="../data/sample.info")
remove.list <- c("PCG194", "PCG137")
counts <- counts[ , -which(names(counts) %in% remove.list)]
sample.info[ -which(sample.info$vial_label %in% remove.list), ]
sample.info <- sample.info[ -which(sample.info$vial_label %in% remove.list), ]
# resave sample info object
save(sample.info, file="../data/sample.info")
counts
ncol(counts)
counts
getwd()
# source("../references/biostats.R")
# Add all required libraries that are installed with install.packages() here
list.of.packages <- c("RCurl", "tidyverse", "vegan", "pheatmap", "pastecs", "factoextra", "FactoMineR", "RColorBrewer", "tibble", "reshape2", "plotly", "corrplot", "PerformanceAnalytics", "cowplot", "here", "janitor", "clipr", "googlesheets4")
# Add all libraries that are installed using BiocManager here
bioconductor.packages <- c("DESeq2", "WGCNA")
#
# # Install BiocManager if needed
# if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
#
# # Get names of all required packages that aren't installed
# new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# new.bioc.packages <- bioconductor.packages[!(bioconductor.packages %in% installed.packages()[, "Package"])]
# # Install all new packages
# if(length(new.packages)) install.packages(new.packages)
# if(length(new.bioc.packages)) BiocManager::install(new.bioc.packages)
# Load all required libraries
all.packages <- c(list.of.packages, bioconductor.packages)
lapply(all.packages, FUN = function(X) {
do.call("require", list(X))
})
# library.stats <- read.csv("../data/library-prep-stats.csv", header=T) %>% clean_names %>%
#   dplyr::mutate_at(vars(tank, p_h, batch, date_extracted), as.factor)
# Read in data from GoogleSheet
sample.info <- read_sheet("https://docs.google.com/spreadsheets/d/1EEfNTnOgQAeAJQv3lQctNC7sXR_JFLeSj9p0x58zUXM/edit?usp=sharing", "RNASeq-samples")[1:11] %>%
clean_names() %>%
mutate_at(vars(tank, temperature, ph, sequenced), as.factor) %>%
mutate_at(vars(length), as.numeric) %>%
mutate(treatment=as.factor(paste(temperature, ph, sep="_"))) %>%
mutate(treatment_tank=factor(paste(treatment, tank, sep="_"))) %>%
filter(sequenced=="YES")
save(sample.info, file="../data/sample.info")
# multiqc.stats <- read.delim(file="../results/fastqc/multiqc_data_trimmed-v2/multiqc_general_stats.txt", sep = "\t")
# colnames(multiqc.stats) <- gsub("FastQC_mqc.generalstats.fastqc.", "", colnames(multiqc.stats))
# multiqc.stats <- multiqc.stats %>%
#   mutate(total_unique = total_sequences*(100-percent_duplicates)/100) %>%
#   left_join(sample.info)
# cor(multiqc.stats %>% mutate(Tank=as.numeric(Tank)) %>% dplyr::select_if(is.numeric) %>%
#       dplyr::select(-Crab, -crab, -initial_volume, -volume_used_at_start_of_library_prep, -water_to_add_to_bring_to_50u_l,
#                     -diluted_concentration, -pcr_cycles, -volume_used_in_qc), use="complete.obs") %>% corrplot::corrplot(tl.cex=.75)
# Using STAR aligned and STAR quantified counts
filenames <- read_delim(file="../results/star/countsfilenames.txt", col_names = c("filename", "sample"), delim = "\t")
files <- file.path(filenames$filename) #extract vector of filenames
all(file.exists(files)) #easy code to check that all files exist!
file_list <- vector(mode = "list", length = nrow(filenames))
names(file_list) <- c(filenames$sample)
for (i in 1:nrow(filenames)) {
file_list[[i]] <- data.frame(read.delim(file=files[i]))[-1:-4,1:2]
names(file_list[[i]]) <- c("gene", filenames$sample[i])
print(paste("Total COUNTS,", names(file_list[[i]][2]), ":", prettyNum(sum(file_list[[i]][2]), big.mark=","), sep=" "))
print(paste("Total GENES,", names(file_list[[i]][2]), ":", prettyNum(nrow(file_list[[i]] %>% filter(.[[2]] != 0)), big.mark=","), sep=" "))
}
(counts <- file_list %>% purrr::reduce(full_join, by = "gene") %>% column_to_rownames(var="gene"))
print(paste("Number of samples:", ncol(counts %>% dplyr::select(contains("PCG"))), sep=" "))
print(paste("Total number of genes in dataframe:", prettyNum(nrow(counts), big.mark = ","), sep=" "))
print(paste("Average number of genes per sample:", prettyNum(mean(colSums(counts %>% dplyr::select(contains("PCG")) != 0)) %>% round(), big.mark = ","), sep=" "))
print(paste("Total counts, all samples:", prettyNum(sum(colSums(counts %>% dplyr::select(contains("PCG")))), big.mark = ","), sep=" "))
#print(paste("Counts for", colnames(counts %>% select(contains("PCG"))), ":",  prettyNum(colSums(counts %>% select(contains("PCG"))), big.mark = ","), sep=" "))
#inspect total counts by sample
ggplotly(
ggplot(data.frame(colSums(counts %>% dplyr::select(contains("PCG")))) %>%
dplyr::rename(count.total = 1) %>% rownames_to_column(var="sample")) +
geom_bar(aes(x=sample, y=count.total), stat = "identity") + ggtitle("Total count by sample") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()))
remove.list <- c("PCG194", "PCG137")
counts[ , -which(names(counts) %in% remove.list)]
counts <- counts[ , -which(names(counts) %in% remove.list)]
sample.info <- sample.info[ -which(sample.info$vial_label %in% remove.list), ]
counts
sample.info
# resave sample info object
save(sample.info, file="../data/sample.info")
nrow(sample.info) == ncol(counts)-5 #should = TRUE
counts
nrow(sample.info) == ncol(counts) #should = TRUE
#str(counts) #columns #1-#5 contain extraneous gene info (chr, start, end, strand, length).
counts.t <- as.data.frame(t(counts)) #remove extraneous columns, transform data to have each sample a row, each column a gene
keep1 <- colMeans(counts.t, na.rm=TRUE) >= 10 #identify genes with mean count >= 10 across all samples (excluding NAs = 10)
keep2 <- rowSums( counts >= 30 ) >= 0.1*59 #identify genes with counts>=30 across at minimum 10% of the samples
keep <- unique(c(names(which(keep1 == T)), names(which(keep2 == T)))) # list of genes meeting one of the two above criteria
counts.ts <- counts.t[,keep]
print(paste("# genes before filtering:", ncol(counts.t)))
print(paste("# genes remaining after pre-filtering:", ncol(counts.ts)))
print(paste("# of genes dropped:", ncol(counts.t) - ncol(counts.ts), sep=" "))
print(paste("% of fragments remaining after pre-filtering: ", signif(100*sum(counts.ts)/sum(counts.t), digits = 5), "%", sep=""))
print(paste("Number of fragments dropped: ", signif(sum(counts.t)-sum(counts.ts), digits = 5)))
print(paste("% of fragments dropped: ", signif(100*(sum(counts.t)-sum(counts.ts))/sum(counts.t), digits = 5), "%", sep=""))
print(paste("Number of fragments remaining: ", signif(sum(counts.ts), digits = 5)))
save(counts, file = "../results/counts")
save(counts.t, file = "../results/counts.t")
save(counts.ts, file = "../results/counts.ts")
# Blast results from the gadMor3.0 genome fasta + gff to pull gene sequences: "../references/gadMor3.0_genes_blastx.tab"
gadMor.blast <- read_delim(file = "../references/gadMor3.0_genes_blastx.tab", delim = "\t",
col_names = c("qaccver", "saccver", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")) %>%
separate(qaccver, sep = ":|-", into = c("SeqID","Start","End")) %>%
mutate_at(vars(Start, End), as.numeric) %>%
separate(saccver, sep="\\|", into=c("na", "SPID", "gene.Uni"), remove = F) %>%
dplyr::select(-na) %>% separate(gene.Uni, sep="_", into=c("gene.Uni", "species"), remove=T) %>%
group_by(SeqID, Start, End) %>% dplyr::slice(which.min(evalue))  %>% # where multiple blast hits for same gene, select one with minimum e-value
left_join(., read_delim(file="../references/gadMor3.0_genes.bed", delim="\t", col_names = c("SeqID", "Start", "End", "gene_info_gadmor"))) %>%
dplyr::select(gene_info_gadmor, everything()) %>%
separate(gene_info_gadmor, sep = ";", remove = F,
into = c("gene_na", "GeneID", "name", "gbkey", "gene_gadmor", "gene_biotype", "gene_synonym")) %>%
select(-gene_na,-name, -gbkey, -gene_biotype, -gene_synonym) %>%
mutate(GeneID=gsub("Dbxref\\=GeneID:", "", GeneID),
gene_gadmor=gsub("gene\\=", "", gene_gadmor)) %>%
clean_names()
# E-VALUE FILTERING
# Count annotated genes with e-value filters
gadMor.blast %>% filter(evalue < 1.0e-10) %>% nrow() # 19,424 genes have e-value <1e-10
gadMor.blast %>% filter(evalue < 1.0e-15) %>% nrow() # 17,028 genes have e-value <1e-15
gadMor.blast %>% filter(evalue < 1.0e-20) %>% nrow() # 14,253 genes have e-value <1e-20
# Filter blast results to meet desired e-value threshold
gadMor.blast <- gadMor.blast %>% filter(evalue < 1.0e-10)
save(gadMor.blast, file = "../references/gadMor.blast")
# Use this code to get list of Uniprot SPID (gene identifiers) to input into the Uniprot Batch Retrieval tool, to obtain GO terms for each gene
gadMor.blast %>% ungroup() %>% dplyr::select(SPID) %>% distinct() %>%
na.omit() %>% unlist() %>% as.vector() %>% write_clip()
# Add GO terms to Uniprot annotation object
gadMor.blast.GO <- left_join(gadMor.blast, read_delim(file = "../references/gadMor_genes_GO.tsv",
delim = "\t") %>% clean_names(),
by = c("spid"="entry")) %>% ungroup()
gadMor.blast
# Add GO terms to Uniprot annotation object
gadMor.blast.GO <- left_join(gadMor.blast, read_delim(file = "../references/gadMor_genes_GO.tsv",
delim = "\t") %>% clean_names(),
by = c("spid"="entry")) %>% ungroup()
save(gadMor.blast.GO, file = "../references/gadMor.blast.GO")
counts.annot.gadmor <- right_join(
gadMor.blast %>% ungroup() %>% dplyr::select(gene_gadmor, spid, gene_uni, species, pident, evalue, gene_info_gadmor, seq_id, start, end, gene_id),
counts.ts %>% t() %>% as.data.frame() %>% rownames_to_column("gene_gadmor"), "gene_gadmor") %>%
left_join(gadMor.blast.GO %>% dplyr::select(gene_gadmor, protein_names, gene_names), "gene_gadmor") #%>%
save(counts.annot.gadmor, file = "../results/star/counts.annot.gadmor")
write.csv(counts.annot.gadmor, file = "../results/counts_annotated_gadmor.csv", row.names = F, quote = F)
right_join(
gadMor.blast %>% ungroup() %>% dplyr::select(gene_gadmor, spid, gene_uni, species, pident, evalue),
counts.ts %>% t() %>% as.data.frame() %>% rownames_to_column(var = "gene_gadmor"), "gene_gadmor") %>% filter(!is.na(spid)) %>%
nrow()
read_delim(file = "../references/genomic.gff", delim = "\t", col_names = F, skip = 8) %>%
mutate(X3=as.factor(X3)) %>% filter(X3=="gene") %>% nrow()
data.frame(rowSums(counts.ts)) %>%
dplyr::rename(read.total = 1) %>%
rownames_to_column(var="sample") %>% #summary()
summarise(mean=round(mean(read.total, na.rm=T)),
sd=round(sd(read.total, na.rm=T)),
se=round(sd/sqrt(length(sample))),
median=median(read.total),
min=min(read.total),
max=max(read.total)) %>% t() %>% as.data.frame() %>%
mutate(V1=prettyNum(V1, big.mark = ",")) %>%
rename("V1"="fragments.per.sample") #use this to average across all samples
fragments <- data.frame(rowSums(counts.ts)) %>%
dplyr::rename(read.total = 1) %>%
rownames_to_column(var="sample") %>%
left_join(sample.info %>% dplyr::select(vial_label, treatment, temperature, ph, tank), by=c("sample"="vial_label")) %>%
mutate(treatment=factor(treatment, ordered = T, levels=c("3_amb", "3_low", "6_amb", "6_low", "10_amb", "10_low")))
ggplotly(
ggplot(data = fragments) +
geom_bar(aes(x=sample, y=read.total, fill=treatment), stat = "identity") + ggtitle("Total # fragments by sample") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()))
hist(log(fragments$read.total))
shapiro.test(log(fragments$read.total))
anova(lm(log(read.total) ~ treatment, fragments))
ggplot(fragments, aes(x=temperature, y=read.total)) + geom_boxplot() + theme_minimal()
ggplot(fragments, aes(x=ph, y=read.total)) + geom_boxplot() + theme_minimal()
ggplot(fragments, aes(x=treatment, y=read.total)) + geom_boxplot() + theme_minimal()
fragments %>% group_by(treatment) %>% tally()
fragments %>% group_by(temperature) %>% tally()
fragments %>% group_by(ph) %>% tally()
fragments %>% group_by(treatment, tank) %>% tally()
fragments %>% group_by(treatment, tank) %>% tally() %>% arrange(tank)
fragments %>% group_by(treatment, tank) %>% tally() %>% arrange(treatment, tank)
prettyNum(ncol(counts.ts),big.mark = ",")
data.frame(rowSums(counts.ts != 0)) %>%
dplyr::rename(count.total = 1) %>%
rownames_to_column(var="sample") %>%
summarise(mean=round(mean(count.total, na.rm=T)),
sd=round(sd(count.total, na.rm=T)),
se=round(sd/sqrt(length(sample))),
median=median(count.total, na.rm=T),
min=min(count.total, na.rm=T),
max=max(count.total, na.rm=T)) %>% t() %>% as.data.frame() %>%
mutate(V1=prettyNum(V1, big.mark = ",")) %>%
rename("V1"="genes.per.sample")
ggplotly(
ggplot(data = data.frame(rowSums(counts.t != 0, na.rm=TRUE)) %>%
dplyr::rename(count.total = 1) %>%
rownames_to_column(var="sample")) +
geom_bar(aes(x=sample, y=count.total), stat = "identity") + ggtitle("Total # genes by sample") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()))
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary")  %>% as.data.frame()
#### Load libraries and source scripts
source("../references/biostats.R")
# Add all required libraries that are installed with install.packages() here
list.of.packages <- c("RCurl", "tidyverse", "vegan", "pheatmap", "pastecs", "factoextra", "FactoMineR", "RColorBrewer", "tibble", "reshape2", "plotly", "cowplot", "clipr", "janitor", "ggpubr", "forcats", "apeglm", "car", "vsn", "devtools", "grid", "gridGraphics", "Rfast", "dendextend", "RColorBrewer", "scales", "VennDiagram")
# Add all libraries that are installed using BiocManager here
bioconductor.packages <- c("DESeq2", "WGCNA")
# # Install BiocManager if needed
# if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
#
# # Get names of all required packages that aren't installed
# new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# new.bioc.packages <- bioconductor.packages[!(bioconductor.packages %in% installed.packages()[, "Package"])]
# # Install all new packages
# if(length(new.packages)) install.packages(new.packages)
# if(length(new.bioc.packages)) BiocManager::install(new.bioc.packages)
# Load all required libraries
all.packages <- c(list.of.packages, bioconductor.packages)
lapply(all.packages, FUN = function(X) {
do.call("require", list(X))
})
# Github packages
install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
library(pairwiseAdonis)
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary")  %>% as.data.frame()
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)  %>% as.data.frame() %>%
gsub("X.home.lspencer.pcod.2022.aligned.star.gadmor.", "", .) %>%
gsub(".Aligned.sortedByCoord.out.bam", "", .)
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)  %>% as.data.frame()
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)  %>% as.data.frame() %>%
gsub("X.home.lspencer.pcod.2022.aligned.star.gadmor.", "", .)
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)  %>% as.data.frame()
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)  %>% as.data.frame() %>%
gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", .)
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)  %>% as.data.frame()
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F, skip=1)  %>% as.data.frame()
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F) %>% t()
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F) %>% as.data.frame() %>% t()
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F) %>% as.data.frame()
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,] %>% as.data.frame()
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,] %>% as.data.frame() %>% t()
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,] %>% as.data.frame() %>% t() %>% as.data.frame()
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,] %>% as.data.frame()
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,-1] %>% as.data.frame()
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,-1] %>% as.data.frame() %>% t() %>% as.data.frame()
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,-1] %>% as.data.frame() %>% t() %>% as.data.frame() %>%
gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", V1) %>%
gsub(".Aligned.sortedByCoord.out.bam", "", V1)
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,-1] %>% as.data.frame() %>% t() %>% as.data.frame() %>%
gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", .) %>%
gsub(".Aligned.sortedByCoord.out.bam", "", .)
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,-1] %>% as.data.frame() %>% t() %>% as.data.frame() %>%
gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", .)
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,-1] %>% as.data.frame() %>% t() %>% as.data.frame()
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,-1] %>% as.data.frame() %>% t() %>% as.data.frame() %>%
mutate(V1=gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", V1))
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,-1] %>% as.data.frame() %>% t() %>% as.data.frame() %>%
mutate(V1=gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", V1)) %>%
mutate(V1=gsub(".Aligned.sortedByCoord.out.bam", "", V1))
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,-1] %>% as.data.frame() %>% t() %>% as.data.frame() %>%
mutate(V1=gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", V1)) %>%
mutate(V1=gsub(".Aligned.sortedByCoord.out.bam", "", V1)) %>% as.vector()
read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,-1] %>% as.data.frame() %>% t() %>% as.data.frame() %>%
mutate(V1=gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", V1)) %>%
mutate(V1=gsub(".Aligned.sortedByCoord.out.bam", "", V1)) %>% unlist() %>% as.vector()
samples <- read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,-1] %>% as.data.frame() %>% t() %>% as.data.frame() %>%
mutate(V1=gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", V1)) %>%
mutate(V1=gsub(".Aligned.sortedByCoord.out.bam", "", V1)) %>% as.vector() %>% unlist()
samples
samples <- (read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,-1] %>% as.data.frame() %>% t() %>% as.data.frame() %>%
mutate(V1=gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", V1)) %>%
mutate(V1=gsub(".Aligned.sortedByCoord.out.bam", "", V1)))$V1 %>% as.vector()
samples
samples <- (read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,-1] %>% as.data.frame() %>% t() %>% as.data.frame() %>%
mutate(V1=gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", V1)) %>%
mutate(V1=gsub(".Aligned.sortedByCoord.out.bam", "", V1)))$V1 %>% as.vector()
counts.summary <- read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F, skip=1)  %>% as.data.frame() %>%
gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", .) %>%
gsub(".Aligned.sortedByCoord.out.bam", "", .) %>%
colnames(counts.summary) <- samples
samples <- (read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F)[1,-1] %>% as.data.frame() %>% t() %>% as.data.frame() %>%
mutate(V1=gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", V1)) %>%
mutate(V1=gsub(".Aligned.sortedByCoord.out.bam", "", V1)))$V1 %>% as.vector()
counts.summary <- read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F, skip=1)  %>% as.data.frame() %>%
gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", .) %>%
gsub(".Aligned.sortedByCoord.out.bam", "", .) %>%
colnames(counts.summary) <- samples
counts.summary <- read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F, skip=1)  %>% as.data.frame() %>%
gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", .) %>%
gsub(".Aligned.sortedByCoord.out.bam", "", .)
colnames(counts.summary) <- samples
counts.summary <- read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F, skip=1)  %>% as.data.frame() %>%
gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", .) %>%
gsub(".Aligned.sortedByCoord.out.bam", "", .)
counts.summary
counts.summary <- read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F, skip=1)  %>% as.data.frame() %>%
gsub("/home/lspencer/pcod-2022/aligned/star-gadmor/", "", .) %>%
gsub(".Aligned.sortedByCoord.out.bam", "", .) %>% as.data.frame()
colnames(counts.summary) <- samples
counts.summary
counts.summary <- read_delim(file = "../results/star/featurecounts/featurecounts_gene.summary", col_names = F, skip=1)  %>% as.data.frame()
colnames(counts.summary) <- samples
counts.summary
